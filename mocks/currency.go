// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/currency.go

// Package mock_internal is a generated GoMock package.
package mock_internal

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	currencyapi_com "github.com/regimentor/currency-calc/internal/currencyapi.com"
	models "github.com/regimentor/currency-calc/internal/models"
)

// MockCurrencyStorage is a mock of CurrencyStorage interface.
type MockCurrencyStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyStorageMockRecorder
}

// MockCurrencyStorageMockRecorder is the mock recorder for MockCurrencyStorage.
type MockCurrencyStorageMockRecorder struct {
	mock *MockCurrencyStorage
}

// NewMockCurrencyStorage creates a new mock instance.
func NewMockCurrencyStorage(ctrl *gomock.Controller) *MockCurrencyStorage {
	mock := &MockCurrencyStorage{ctrl: ctrl}
	mock.recorder = &MockCurrencyStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyStorage) EXPECT() *MockCurrencyStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCurrencyStorage) Create(ctx context.Context, currency *models.CreateCurrencyDto) (*models.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, currency)
	ret0, _ := ret[0].(*models.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCurrencyStorageMockRecorder) Create(ctx, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCurrencyStorage)(nil).Create), ctx, currency)
}

// GetBySlug mocks base method.
func (m *MockCurrencyStorage) GetBySlug(ctx context.Context, slug []string, date time.Time) ([]models.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySlug", ctx, slug, date)
	ret0, _ := ret[0].([]models.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySlug indicates an expected call of GetBySlug.
func (mr *MockCurrencyStorageMockRecorder) GetBySlug(ctx, slug, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlug", reflect.TypeOf((*MockCurrencyStorage)(nil).GetBySlug), ctx, slug, date)
}

// GetBySlugAndBase mocks base method.
func (m *MockCurrencyStorage) GetBySlugAndBase(ctx context.Context, slug []string, base string, date time.Time) ([]models.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySlugAndBase", ctx, slug, base, date)
	ret0, _ := ret[0].([]models.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySlugAndBase indicates an expected call of GetBySlugAndBase.
func (mr *MockCurrencyStorageMockRecorder) GetBySlugAndBase(ctx, slug, base, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlugAndBase", reflect.TypeOf((*MockCurrencyStorage)(nil).GetBySlugAndBase), ctx, slug, base, date)
}

// MockExternalCurrencyApi is a mock of ExternalCurrencyApi interface.
type MockExternalCurrencyApi struct {
	ctrl     *gomock.Controller
	recorder *MockExternalCurrencyApiMockRecorder
}

// MockExternalCurrencyApiMockRecorder is the mock recorder for MockExternalCurrencyApi.
type MockExternalCurrencyApiMockRecorder struct {
	mock *MockExternalCurrencyApi
}

// NewMockExternalCurrencyApi creates a new mock instance.
func NewMockExternalCurrencyApi(ctrl *gomock.Controller) *MockExternalCurrencyApi {
	mock := &MockExternalCurrencyApi{ctrl: ctrl}
	mock.recorder = &MockExternalCurrencyApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalCurrencyApi) EXPECT() *MockExternalCurrencyApiMockRecorder {
	return m.recorder
}

// GetCurrenciesByDate mocks base method.
func (m *MockExternalCurrencyApi) GetCurrenciesByDate(slug []string, date time.Time) (*currencyapi_com.CurrenciesComResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrenciesByDate", slug, date)
	ret0, _ := ret[0].(*currencyapi_com.CurrenciesComResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrenciesByDate indicates an expected call of GetCurrenciesByDate.
func (mr *MockExternalCurrencyApiMockRecorder) GetCurrenciesByDate(slug, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrenciesByDate", reflect.TypeOf((*MockExternalCurrencyApi)(nil).GetCurrenciesByDate), slug, date)
}

// GetCurrenciesFromTo mocks base method.
func (m *MockExternalCurrencyApi) GetCurrenciesFromTo(base string, currencies []string, date time.Time) (*currencyapi_com.CurrenciesComResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrenciesFromTo", base, currencies, date)
	ret0, _ := ret[0].(*currencyapi_com.CurrenciesComResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrenciesFromTo indicates an expected call of GetCurrenciesFromTo.
func (mr *MockExternalCurrencyApiMockRecorder) GetCurrenciesFromTo(base, currencies, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrenciesFromTo", reflect.TypeOf((*MockExternalCurrencyApi)(nil).GetCurrenciesFromTo), base, currencies, date)
}
